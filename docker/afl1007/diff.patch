diff --git a/afl-2.57b/afl-fuzz.c b/afl-2.57b/afl-fuzz.c
index a061a58..ff712fb 100644
--- a/afl-2.57b/afl-fuzz.c
+++ b/afl-2.57b/afl-fuzz.c
@@ -951,7 +951,7 @@ static inline u8 has_new_bits(u8* virgin_map) {
   u64* total_count = (u64*) (trace_bits + MAP_SIZE + 8);
 
   if (*total_count > 0)
-    cur_distance = (double) (*total_distance) / (double) (*total_count);
+    cur_distance = (double) (*total_distance);
   else
     cur_distance = -1.0;
 
@@ -972,7 +972,7 @@ static inline u8 has_new_bits(u8* virgin_map) {
   u32* total_count = (u32*)(trace_bits + MAP_SIZE + 4);
 
   if (*total_count > 0) {
-    cur_distance = (double) (*total_distance) / (double) (*total_count);
+    cur_distance = (double) (*total_distance);
   else
     cur_distance = -1.0;
 
diff --git a/instrument/aflgo-pass.so.cc b/instrument/aflgo-pass.so.cc
index 1304a6e..9aaed48 100644
--- a/instrument/aflgo-pass.so.cc
+++ b/instrument/aflgo-pass.so.cc
@@ -36,6 +36,7 @@
 #include "llvm/IR/Module.h"
 #include "llvm/Support/Debug.h"
 #include "llvm/Transforms/IPO/PassManagerBuilder.h"
+#include "llvm/Transforms/Utils/BasicBlockUtils.h"
 #include "llvm/Support/CommandLine.h"
 #include "llvm/Support/FileSystem.h"
 #include "llvm/Support/raw_ostream.h"
@@ -69,6 +70,8 @@ cl::opt<std::string> OutDirectory(
     cl::desc("Output directory where Ftargets.txt, Fnames.txt, and BBnames.txt are generated."),
     cl::value_desc("outdir"));
 
+typedef std::pair<int, llvm::BasicBlock::iterator> BBInfo;
+
 namespace llvm {
 
 template<>
@@ -426,53 +429,54 @@ bool AFLCoverage::runOnModule(Module &M) {
     for (auto &F : M) {
 
       int distance = -1;
+      std::vector<BBInfo> ips;
 
       for (auto &BB : F) {
+          distance = -1;
 
-        distance = -1;
-
-        if (is_aflgo) {
+          if (is_aflgo) {
 
-          std::string bb_name;
-          for (auto &I : BB) {
-            std::string filename;
-            unsigned line;
-            getDebugLoc(&I, filename, line);
+              std::string bb_name;
+              for (auto &I: BB) {
+                  std::string filename;
+                  unsigned line;
+                  getDebugLoc(&I, filename, line);
 
-            if (filename.empty() || line == 0)
-              continue;
-            std::size_t found = filename.find_last_of("/\\");
-            if (found != std::string::npos)
-              filename = filename.substr(found + 1);
+                  if (filename.empty() || line == 0)
+                      continue;
+                  std::size_t found = filename.find_last_of("/\\");
+                  if (found != std::string::npos)
+                      filename = filename.substr(found + 1);
 
-            bb_name = filename + ":" + std::to_string(line);
-            break;
-          }
+                  bb_name = filename + ":" + std::to_string(line);
+                  break;
+              }
 
-          if (!bb_name.empty()) {
+              if (!bb_name.empty()) {
 
-            if (find(basic_blocks.begin(), basic_blocks.end(), bb_name) == basic_blocks.end()) {
+                  if (find(basic_blocks.begin(), basic_blocks.end(), bb_name) == basic_blocks.end()) {
 
-              if (is_selective)
-                continue;
+                      if (is_selective)
+                          continue;
 
-            } else {
+                  } else {
 
-              /* Find distance for BB */
+                      /* Find distance for BB */
 
-              if (AFL_R(100) < dinst_ratio) {
-                std::map<std::string,int>::iterator it;
-                for (it = bb_to_dis.begin(); it != bb_to_dis.end(); ++it)
-                  if (it->first.compare(bb_name) == 0)
-                    distance = it->second;
+                      if (AFL_R(100) < dinst_ratio) {
+                          std::map<std::string, int>::iterator it;
+                          for (it = bb_to_dis.begin(); it != bb_to_dis.end(); ++it)
+                              if (it->first.compare(bb_name) == 0)
+                                  distance = it->second;
 
+                      }
+                  }
               }
-            }
           }
-        }
-
-        BasicBlock::iterator IP = BB.getFirstInsertionPt();
-        IRBuilder<> IRB(&(*IP));
+          ips.push_back(std::make_pair(distance, BB.getFirstInsertionPt()));
+      }
+      for (auto &IP : ips) {
+        IRBuilder<> IRB(&(*IP.second));
 
         if (AFL_R(100) >= inst_ratio) continue;
 
@@ -509,21 +513,10 @@ bool AFLCoverage::runOnModule(Module &M) {
             IRB.CreateStore(ConstantInt::get(Int32Ty, cur_loc >> 1), AFLPrevLoc);
         Store->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
 
-        if (distance >= 0) {
+        if (IP.first >= 0) {
 
           ConstantInt *Distance =
-              ConstantInt::get(LargestType, (unsigned) distance);
-
-          /* Add distance to shm[MAPSIZE] */
-
-          Value *MapDistPtr = IRB.CreateBitCast(
-              IRB.CreateGEP(MapPtr, MapDistLoc), LargestType->getPointerTo());
-          LoadInst *MapDist = IRB.CreateLoad(MapDistPtr);
-          MapDist->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
-
-          Value *IncrDist = IRB.CreateAdd(MapDist, Distance);
-          IRB.CreateStore(IncrDist, MapDistPtr)
-              ->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
+              ConstantInt::get(LargestType, (unsigned) IP.first);
 
           /* Increase count at shm[MAPSIZE + (4 or 8)] */
 
@@ -536,6 +529,21 @@ bool AFLCoverage::runOnModule(Module &M) {
           IRB.CreateStore(IncrCnt, MapCntPtr)
               ->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
 
+          /* Add distance to shm[MAPSIZE] */
+
+            Value *MapDistPtr = IRB.CreateBitCast(
+                    IRB.CreateGEP(MapPtr, MapDistLoc), LargestType->getPointerTo());
+            LoadInst *MapDist = IRB.CreateLoad(MapDistPtr);
+            MapDist->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
+
+            Value *Cmp = IRB.CreateICmpULT(MapDist, Distance);
+
+            Instruction *ThenBB = SplitBlockAndInsertIfThen(Cmp, &*IP.second, false);
+
+            IRB.SetInsertPoint(ThenBB);
+
+            IRB.CreateStore(Distance, MapDistPtr)
+                    ->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
         }
 
         inst_blocks++;
